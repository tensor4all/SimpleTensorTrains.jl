var documenterSearchIndex = {"docs":
[{"location":"#SimpleTensorTrains","page":"Home","title":"SimpleTensorTrains","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is the documentation for SimpleTensorTrains.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A simple tensor train (matrix product state/operator) data structure and algorithms built on top of ITensors.jl.","category":"page"},{"location":"#API-Reference","page":"Home","title":"API Reference","text":"","category":"section"},{"location":"#Tensor-Train-Type","page":"Home","title":"Tensor Train Type","text":"","category":"section"},{"location":"#SimpleTensorTrains.SimpleTensorTrain","page":"Home","title":"SimpleTensorTrains.SimpleTensorTrain","text":"SimpleTensorTrain - A simple tensor train data structure\n\nThis struct represents a tensor train (matrix product state/operator) as a vector of ITensors with left and right boundary indices. This struct is designed to be compatible with ITensorMPS.MPS and ITensorMPS.MPO.\n\nFields\n\ndata::Vector{ITensor}: Vector of tensors in the tensor train\nllim::Int: Left boundary index\nrlim::Int: Right boundary index\n\nConversion Functions\n\nThis struct supports conversion to/from ITensorMPS types:\n\nMPS(stt::SimpleTensorTrain) - Convert to Matrix Product State\nMPO(stt::SimpleTensorTrain) - Convert to Matrix Product Operator  \nSimpleTensorTrain(mps::MPS) - Convert from Matrix Product State\nSimpleTensorTrain(mpo::MPO) - Convert from Matrix Product Operator\n\n\n\n\n\n","category":"type"},{"location":"#SimpleTensorTrains.SimpleTensorTrain-Tuple{Vector{ITensors.ITensor}}","page":"Home","title":"SimpleTensorTrains.SimpleTensorTrain","text":"SimpleTensorTrain(data::Vector{ITensor})\n\nConstruct a SimpleTensorTrain from a vector of ITensors.\n\nThe left and right limits are automatically set to 0 and length(data) + 1 respectively.\n\nArguments\n\ndata::Vector{ITensor}: Vector of tensors forming the tensor train\n\nReturns\n\nSimpleTensorTrain: A new SimpleTensorTrain object with default limits\n\n\n\n\n\n","category":"method"},{"location":"#SimpleTensorTrains.SimpleTensorTrain-Tuple{ITensorMPS.MPS}","page":"Home","title":"SimpleTensorTrains.SimpleTensorTrain","text":"Convert ITensorMPS.MPS to SimpleTensorTrain\n\nThis function takes an ITensorMPS.MPS and converts it to a SimpleTensorTrain. The conversion preserves the tensor structure and indices.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleTensorTrains.SimpleTensorTrain-Tuple{ITensorMPS.MPS, Int64, Int64}","page":"Home","title":"SimpleTensorTrains.SimpleTensorTrain","text":"Convert ITensorMPS.MPS to SimpleTensorTrain with explicit left and right limits\n\nThis function allows specifying the left and right limits explicitly.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleTensorTrains.SimpleTensorTrain-Tuple{ITensorMPS.MPO}","page":"Home","title":"SimpleTensorTrains.SimpleTensorTrain","text":"Convert ITensorMPS.MPO to SimpleTensorTrain\n\nThis function takes an ITensorMPS.MPO and converts it to a SimpleTensorTrain. The conversion preserves the tensor structure and indices.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleTensorTrains.SimpleTensorTrain-Tuple{ITensorMPS.MPO, Int64, Int64}","page":"Home","title":"SimpleTensorTrains.SimpleTensorTrain","text":"Convert ITensorMPS.MPO to SimpleTensorTrain with explicit left and right limits\n\nThis function allows specifying the left and right limits explicitly.\n\n\n\n\n\n","category":"method"},{"location":"#Tensor-Train-Operations","page":"Home","title":"Tensor Train Operations","text":"","category":"section"},{"location":"#SimpleTensorTrains.contract","page":"Home","title":"SimpleTensorTrains.contract","text":"contract(M1::SimpleTensorTrain, M2::SimpleTensorTrain; alg=Algorithm\"fit\"(), cutoff::Real=default_cutoff(), maxdim::Int=default_maxdim(), nsweeps::Int=default_nsweeps(), kwargs...)\n\nContract two SimpleTensorTrain objects (tensor network contraction).\n\nThis function performs the contraction of two tensor trains, which is equivalent to computing the product of two matrix product operators. Multiple algorithms are available for the contraction.\n\nArguments\n\nM1::SimpleTensorTrain: First tensor train\nM2::SimpleTensorTrain: Second tensor train\n\nKeyword Arguments\n\nalg: Algorithm to use for contraction. Options:\nAlgorithm\"fit\"() (default): Variational fitting algorithm\nAlgorithm\"densitymatrix\"(): Density matrix renormalization algorithm\nAlgorithm\"zipup\"(): Zip-up algorithm from ITensorMPS\nAlgorithm\"naive\"(): Naive contraction from ITensorMPS\ncutoff::Real: Truncation cutoff for singular values (default: default_cutoff())\nmaxdim::Int: Maximum bond dimension (default: default_maxdim())\nnsweeps::Int: Number of sweeps for the fit algorithm (default: default_nsweeps())\nkwargs...: Additional keyword arguments passed to the underlying algorithm\n\nReturns\n\nSimpleTensorTrain: The contracted tensor train (product of M1 and M2)\n\nExamples\n\nresult = contract(M1, M2)  # Using default fit algorithm\nresult = contract(M1, M2; alg=Algorithm\"densitymatrix\"(), maxdim=100)\n\n\n\n\n\n","category":"function"},{"location":"#SimpleTensorTrains.truncate","page":"Home","title":"SimpleTensorTrains.truncate","text":"truncate(stt::SimpleTensorTrain; cutoff::Real=default_cutoff(), maxdim::Int=default_maxdim(), kwargs...)\n\nTruncate a SimpleTensorTrain by removing small singular values, returning a new object.\n\nThis function creates a new SimpleTensorTrain by converting to MPS, applying ITensorMPS.truncate!, and creating a new SimpleTensorTrain from the result.\n\nArguments\n\nstt::SimpleTensorTrain: The tensor train to truncate\n\nKeyword Arguments\n\ncutoff::Real: Cutoff threshold for singular values (default: default_cutoff())\nmaxdim::Int: Maximum bond dimension (default: default_maxdim())\nkwargs...: Additional keyword arguments passed to ITensorMPS.truncate!\n\nReturns\n\nSimpleTensorTrain: A new truncated tensor train\n\n\n\n\n\n","category":"function"},{"location":"#SimpleTensorTrains.truncate!","page":"Home","title":"SimpleTensorTrains.truncate!","text":"truncate!(stt::SimpleTensorTrain; cutoff::Real=default_cutoff(), maxdim::Int=default_maxdim(), kwargs...)\n\nTruncate a SimpleTensorTrain in-place by removing small singular values.\n\nThis function modifies the SimpleTensorTrain in-place by converting to MPS, applying ITensorMPS.truncate!, and updating the tensor data.\n\nArguments\n\nstt::SimpleTensorTrain: The tensor train to truncate (modified in-place)\n\nKeyword Arguments\n\ncutoff::Real: Cutoff threshold for singular values (default: default_cutoff())\nmaxdim::Int: Maximum bond dimension (default: default_maxdim())\nkwargs...: Additional keyword arguments passed to ITensorMPS.truncate!\n\nReturns\n\nSimpleTensorTrain: The modified tensor train (same object as input)\n\n\n\n\n\n","category":"function"},{"location":"#SimpleTensorTrains.maxlinkdim","page":"Home","title":"SimpleTensorTrains.maxlinkdim","text":"maxlinkdim(stt::SimpleTensorTrain)\n\nGet the maximum link (bond) dimension in a SimpleTensorTrain.\n\nThis function computes the maximum dimension of the bond indices connecting adjacent tensors in the tensor train.\n\nArguments\n\nstt::SimpleTensorTrain: The tensor train to analyze\n\nReturns\n\nInt: Maximum bond dimension\n\n\n\n\n\n","category":"function"},{"location":"#SimpleTensorTrains.siteinds","page":"Home","title":"SimpleTensorTrains.siteinds","text":"siteinds(x::SimpleTensorTrain)\n\nExtract the site indices from each tensor in a SimpleTensorTrain.\n\nThis function returns a vector of index vectors, where each element contains the site (physical) indices for the corresponding tensor in the train.\n\nArguments\n\nx::SimpleTensorTrain: The tensor train to extract site indices from\n\nReturns\n\nVector{Vector{Index}}: Vector of site index vectors, one per tensor\n\n\n\n\n\n","category":"function"},{"location":"#Default-Parameters","page":"Home","title":"Default Parameters","text":"","category":"section"},{"location":"#SimpleTensorTrains.default_maxdim","page":"Home","title":"SimpleTensorTrains.default_maxdim","text":"default_maxdim()\n\nReturn the default maximum bond dimension for tensor train operations.\n\nThe default is typemax(Int), which effectively means no limit on bond dimension.\n\nReturns\n\nInt: The default maximum bond dimension\n\n\n\n\n\n","category":"function"},{"location":"#SimpleTensorTrains.default_cutoff","page":"Home","title":"SimpleTensorTrains.default_cutoff","text":"default_cutoff()\n\nReturn the default cutoff threshold for truncating small singular values.\n\nThe default is 1e-30, which is a very small threshold suitable for high-precision calculations.\n\nReturns\n\nFloat64: The default cutoff value\n\n\n\n\n\n","category":"function"},{"location":"#SimpleTensorTrains.default_nsweeps","page":"Home","title":"SimpleTensorTrains.default_nsweeps","text":"default_nsweeps()\n\nReturn the default number of sweeps for variational fitting algorithms.\n\nThe default is 1, which performs a single sweep.\n\nReturns\n\nInt: The default number of sweeps\n\n\n\n\n\n","category":"function"}]
}
